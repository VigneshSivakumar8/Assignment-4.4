2)  Importance and usage of the below terms :-
           i) DFSInputStream : 
                            DFSInputStream is used as a wrapper by FSInputStream to manage I/O operations over Namenode and Datanode.
               DFS plays an important role in HDFS File Read Operation that is explained by the following steps :
                           a) Client calls read() on DFSInputStream. DFSInputStream holds the list of address of block locations on 
                   Datanode for the first few blocks of the file. It then locates the first block on closest Datanode and connects  to it.
                           b) Block reader gets initialized on target Block/Datanode along with below information:
                                                           * Block ID.
                                                           * Data start offset to read from.
                                                           * Length of data to read.
                                                           * Client name.
                           c) Data is streamed from the Datanode back to the client in form of packets, this data is copied directly to
                   input buffer provided by client.DFS client is reading and performing checksum operation and updating the client buffer.
                           d) Read () is called repeatedly on stream till the end of block is reached. When end of block is reached
                   DFSInputStream will close the connection to Datanode and search next closest Datanode to read the block from it.
                           e) Blocks are read in order, once DFSInputStream done through reading of the first few blocks, it calls the 
                   Namenode to retrieve Datanode locations for the next batch of blocks.
                           f) When client has finished reading it will call Close() on FSDataInputStream to close the connection.
                           g)  If Datanode is down during reading or DFSInputStream encounters an error during communication, 
                   DFSInputStream will switch to next available Datanode where replica can be found. DFSInputStream remembers the Datanode
                   which encountered an error so that it does not retry them for later blocks.
                   
           ii) DFSOutputStream : 
                                DFSOutputStream is a class that is used to split the data written by the client into packets, which it 
                   writes to an internal queue, called the data queue. The data queue is consumed by the DataStreamer, which is responsible
                   for asking the namenode to allocate new blocks by picking a list of suitable datanodes to store the replicas.
                   The list of datanodes form a pipeline, and here we’ll assume the replication level is three, so there are three nodes
                   in the pipeline. TheDataStreamer streams the packets to the first datanode in the pipeline, which stores the packet and 
                   forwards it to the second datanode in the pipeline. Similarly, the second datanode stores the packet and forwards it to
                   the third (and last) datanode in the pipeline. DFSOutputStream also maintains an internal queue of packets that are 
                   waiting to be acknowledged by datanodes, called the ack queue. A packet is removed from the ack queue only when it has 
                   been acknowledged by the datanodes in the pipeline. Datanode sends the acknowledgement once required replicas are 
                   created (3 by default). Similarly all the blocks are stored and replicated on the different datanodes, the data blocks
                   are copied in parallel.
                   
          iii) FSDataInputStream : 
                                  FSDataInputStream is an input stream to support file seeks to the client and is returned from 
                    DistributedFileSystem. FSDataInputStream uses a wrapper DFSInputStream to manage I/O operations over Namenode and 
                    Datanode. The following steps are followed to read HDFS File where the FSDataInputStream is implemented :
                          a) To start the file read operation, client opens the required file by calling open() on Filesystem object
                    which is an instance of DistributedFileSystem. Open method initiate HDFS client for the read request.
                          b) DistributedFileSystem interacts with Namenode to get the block locations of file to be read. Block locations
                    re stored in metadata of namenode. For each block,Namenode returns the sorted address of Datanode that holds the
                    copy of that block.Here sorting is done based on the proximity of Datanode with respect to Namenode, picking up the 
                    nearest Datanode first.
                          c) DistributedFileSystem returns an FSDataInputStream, which is an input stream to support file seeks to the
                    client. FSDataInputStream uses a wrapper DFSInputStream to manage I/O operations over Namenode and Datanode.
                    The remaining steps are carried out by DFSInputStream.
                     
           iv) FSDataOutputStream :
                                   The DistributedFileSystem returns a FSDataOutputStream for the client to start writing data to. Just 
                    as in the read case, FSDataOutputStream wraps a DFSOutputStream, which handles communication with the datanodes and 
                    namenode.
                    Firstly,the client creates the file by calling create() method on DistributedFileSystem.DistributedFileSystem makes 
                    an RPC call to the namenode to create a new file in the filesystem’s namespace, with no blocks associated with it.
                    The namenode performs various checks to make sure the file doesn’t already exist and that the client has the right 
                    permissions to create the file. If these checks pass, the namenode makes a record of the new file; otherwise, file 
                    creation fails and the client is thrown an  IOException. The DistributedFileSystem returns anFSDataOutputStream for
                    the client to start writing data to. Just as in the read case, FSDataOutputStream wraps a DFSOutputStream, which 
                    handles communication with the datanodes and namenode. The remaining steps of writing into a HDFS file are performed 
                    by DFSOutputStream.
                    
                    
                    
